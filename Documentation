1) Qu'est-ce que la SDL2?
La SDL (Simple DirectMedia Layer) est une bibliothèque de développement multi-plateforme conçue pour fournir un accès de bas niveau à l'audio, au clavier, à la souris, au joystick et au matériel graphique via OpenGL et Direct3D. Il est utilisé par des logiciles de lecture vidéo, des émulateurs et des jeux populaires. La SDL2 est fournise sous une license qui autorise à l'utiliser gratuitement pour tout type d'application.


2) Que peut faire la SDL2?
Elle nous permet de gérer l'affichage vidéo(nécessite un API annexe), les évènements, l'audio numérique, la gestion des périphériques commun (clavier, souris, joystick), la lecture de CD-Audio, le multithreading, l'utilisation de timer précis. Parmi les modules disponibles pour la SDL, les plus connus sont la gestion des polices, la gestion de plusieurs formats d'images, une bibliothèque primitives pour le dessin 2D, la gestion de réseau, la rotation et le zoom sur les surfaces, la gestion de plusieurs format de sons. On peut aussi avec OpenGL qui est un ensemble normalisé de fonctions de calcul d'image 2D ou 3D (utilisé pour CS-GO ou Half-Life).


3) Sur quelles plateformes fonctionne la SDL2?
La SDL2 fonctionne sur Windows, Mac OS X, Linux, iOS, Android et autres.


4) Comment obtenir et installer la SDL2 sur un EDI?
Se rendre sur le site internet libsdl.org et clicker sur "SDL Releases" dans la catégorie "Download". En fonction de la manière que vous désirez l'utiliser, trois catégorie s'offrent à vous. "Source Code" est le code source réel de la SDL, "Runtime libraries" sont les fichiers que vous deverez partager avec votre .exe pour permettre que votre application fonctionne en dehors du logiciel. "Development libraries" sont les fichiers qui vous permettent de développer avec de la SDL. Pour le développement nous avons donc besoin de la dernière catégorie. Unzipper votre dossier proche de vos projets pour une accès simplifié des fichiers à vos projets.

Pour pouvoir utiliser la SDL sur CodeBlocks, vous devez commencez par inclure dans vos "Build options..." des fichiers, pour accèder à "Build options", faites un click droit sur le nom du projet et clicker sur "Build options...". Clicker ensuite sur Linker settings et aujouter deux fichiers, le libSDLmain.a et le libSDL.dll.a vous pouvez retrouver ces fichiers dans votre dossier contenant les fichiers de la SDL que vous avez téléchargé précédemant. En fonction de votre compiler (que vous pouvez voir sur votre dossier CodeBlocks/MinGW) qui est soit "i686-w64-mingw32" soit "x86_64-w64-mingw32". Dans la SDL, clicker sur le dossier avec le même nom que votre compiler puis sur "lib" et vous trouverez vos deux fichiers. 
Après avoir ajouté ces deux fichiers, clicker sur "Search directories" et dans la catégorie "Compiler" ajouter le dossier include présent dans le même dossier que le dossier "lib". Ensuite clicker sur "Linker" et ajouter le dossier "lib". Ajouter dans votre main.c dans les include #include <SDL2/SDL.h>. Ensuite, rajouter deux arguments dans votre main, un integer et un tableau de caractère (ex: int argc, char *argv[]).
Compilez une première fois votre projet et retournez dans votre dossier SDL dans le même dossier où se trouvent le dossier "include" et "lib" et clicker sur le dossier "bin". Copiez le fichier "SDL"2.dll" et collez le dans le dossier "bin" puis "Debug" de votre projet. Vous êtes prêt à utiliser la SDL sur CodeBlocks.


5) Quelles sont les différences entre SDL1 et SDL2?
Voici les ajouts pour SDL2: une accélération matérielle 3D complète, support OpenGL, soutien aux fenêtres multiples, prise en charge de plusieurs appareils audio, support d'enregistrement audio, support Android et iOS, API de rendu 2D simple, retour de force, prise en charge de XInput et Xaudio2 pour Windows, opérations atomiques, gestion de l'énergie, fenêtres en forme, audio 32 bits, API simplifié de la manette de jeu, support tactile, meilleur soutien au plein écran, meilleur prise en charge du clavier, boîtes à messages, support presse-papiers, API pour création de boîtes à outils graphiques robustes, soutien Drag'n'Drop, macro affirmation puissante, licence zlib, fix de désagréments.


6)Pour utiliser la SDL 2 dans votre projet, vous devez initialiser l’instance SDL 2, quelles sont les étapes d’initialisation à réaliser pour utiliser la lib SDL 2, donnez le code correspondant et expliquez précisément chaque instruction.
Avant de commencer, nous devons initialiser tout les sous-systèmes SDL que nous voulons utiliser. Pour cela nous allons utiliser la fonction SDL_Init, point de départ d'un prgramme en SDL, qui initialisera tout les sous-système que nous voulons, pour tout initialiser nous utiliserons SDL_Init(SDL_INIT_EVERYTHING). Cette fonction renverra 0 si l'initialisation c'est bien passé ou une valeur négative si non. Ajoutons donc cette fonction dans un if pour vérifier si l'initialisation c'est bien faite ou non, si oui on continue le programme. Si non on affiche l'erreur, on utilise la procedure SDL_Quit() pour détruire toutes les données relatives à la SDL et on quitte le programme.


7) Comment créer une fenêtre avec SDL 2, donnez et expliquez le code correspondant à la création d’une fenêtre avec SDL 2.
Pour la création d'une fenêtre, nous devons commencer par créer une variable de type pointeur contenant l'adresse de SDL_Window que nous initialisons à NULL. Ensuite nous rajontons une else à notre premier if pour dire, si l'initailisation c'est bien passé, nous donnons comme valeur au poiteur de la fenêtre une fenêtre avec la fonction SDL_CreateWindow(title,x,y,w,h,flags). Les paramètres sont: 
- title correspond à une chaine de caractères étant le nom de la fenêtre
- x correspond à la position de la fenêtre sur l'axe x de l'écran ((0,0) étant en haut à gauche)
- y correspond à la position de la fenêtre sur l'axe y de l'écran ((0,0) étant en haut à gauche)
- w correspond à la largeur de la fenêtre
- h correspond à la hauteur de la fenêtre
- flags correspond à une série de drapeaux qui permettent de choisir des options pour la fenêtre (ex: SDL_WINDOW_SHOWN)

Afin d'avoir le temps de voir le rendu de la fenêtre, utilisez la fonction SDL_Delay(millisecond) (ex: SDL_Delay(1000) = 1 sec.). 

Comme lorsqu'on quitte la SDL après l'avoir initialisé, il faut détruire les fenêtres avant la fin du code. Pour détruire une page nous utiliserons la fonction SDL_DestroyWindow(le pointeur de la fenêtre).


8)Gestion d'une fenêtre SDL2, donnez les primitives associés à la fenêtre SDL2.
https://zestedesavoir.com/tutoriels/1014/utiliser-la-sdl-en-langage-c/les-premieres-fenetres/#1-initialiser-la-sdl
A la création de la fenêtre, nous avons donner des valeurs pour des paramètres et il est possible de les modifiers. Les fonctions pour récupérer ses données sont construites de la même manière.
- SDL_SetWindow permet de changer les paramètres 
- SDL_GetWindow permet d'obtenir les paramètres
- le premier paramètre de toutes ces fonctions est un pointeur sur SDL_Window, càd la fenêtre concernée

Le title
La fonction char *SDL_GetWindowTitle(le pointeur de la fenêtre) permet de récupérer la valeur du title.
La fonction void SDL_SetWindowTitle(le pointeur de la fenêtre, chaine de caractère) permet de donner une nouvelle valeur au titre.

La position
La fonction void SDL_GetWindowPosition(le pointer de la fenêtre, pointeur x, pointeur y) permet de récupérer la position de la fenêtre.
La fonction void SDL_SetWindowPosition(le pointeur de la fenêtre, int x, int y) permet de donner deux nouvelles valeurs pour une nouvelle position.

La taille 
La fonction void SDL_GetWindowSize(le pointeur de la fenêtre, pointeur w, pointeur h) permet de récupérer la taille de la fenêtre.
La fonction void SDL_SetWindowSize(le pointeur de la fenêtre, int w, int h) permet de modifier la taille de la fenêtre.

Les drapeaux
La fonction int SDL_GetWindowFlags(le pointeur de la fenêtre) récupère une valeur entière comme pour le SDL_Init. Pour savoir si un drapeau est présent, il faut tout simplement utiliser l’opérateur & avec le drapeau et le retour de la fonction. 
Ex:
Uint32 retour = SDL_GetWindowFlags(window);
if(retour & SDL_WINDOW_RESIZABLE){
    printf("La fenetre est redimensionnable");
}
Pour agir sur les drapeaux de la fenêtre, il n'existe pas de SDL_SetWindowFlags(). MAis on dispose de plusieurs fonctions pour des actions pour agrandir, réduit et restaurer la fenêtre.
Agrandir: void SDL_MaximizeWindow(le pointeur de la fenêtre)
Réduire: void SDL_MinimizeWindow(le pointeur de la fenêtre)
Réstaurer: void SDL_RestoreWindow(le pointeur de la fenêtre)

Pour gérer la visibilité de la fenêtre, nous pouvons la cachée, la rendre visible et la faire passer devant toutes les autres fenêtres.
Cacher: void SDL_HideWindow(le pointeur de la fenêtre)
Visible: void SDL_ShowWindow(le pointeur de la fenêtre)
Devant: void SDL_RaiseWindow(le pointeur de la fenêtre)

Pour gérer le plein écran nous utilisons la fonciton int SDL_SetWindowFullscreen(le pointeur de la fenêtre, flag). Le flag peut être:
SDL_WINDOW_FULLSCREEN pour mettre en plein écran
SDL_WINDOW_FULLSCREEN_DESKTOP pour placer en plein écran à la résolution du bureau
0 pour placer en fenêtré

9) Gérer un rendu : qu’est-ce qu’un renderer, comment est-il associé à la fenêtre SDL 2 ? Donnez et expliquez le code permettant de gérer un rendu, création, affichage, effacement…
Pour créer une renderer, il faut utiliser la fonciton SDL_Renderer *SDL_CreateRenderer(le pointeur de la fenêtre, int index, Uint32 flags). L'index correspond au pilote utiliser pour gérer le rendererer(donne -1 de base pour le laisser choisir le premier qui correspond).
Comme pour la fenêtre, à la fin il faut le détruire donc nous utilisons la fonction void SDL_DestroyRenderer(le poiteur du renderer).
Il est aussi possible de créer une fenêtre et un renderer à l'aide d'une seule fonction, int SDL_CreateWindowAndRenderer(int width, int height, Uint32 window_flags, pointer le pointeur de la fenêtre, pointer le pointeur du renderer).

10)SDL_Point et SDL_Rect :
Comme en mathématiques, on représente un point avec son abscisse et son ordonnée. Ainsi, un point est représenté en SDL par une structure qui a pour champ ces deux composantes. Il s’agit de la structure SDL_Point. Ses champs :
-x représente l’abscisse du point ;
-y représente l’ordonnée du point.

SDL_Point point = {0, 0}

Pour définir un rectangle:
Le rectangle a toujours ses côtés parallèles aux axes. Ce rectangle est représenté grâce à la structure SDL_Rect. Ses champs :

-x représente l’abscisse du coin en haut à gauche du rectangle ;
-y représente l’ordonnée du coin en haut à gauche du rectangle ;
-w représente la largeur du rectangle ;
-h représente la hauteur du rectangle.

11)Les couleurs avec la SDL2 :
Le système de couleur est basé sur le RGBA et il existe une structure SDL_Color reprennant ces 4 composants (rouge, vert, bleu et alpha(transparence)).

12)Donnez le code permettant d’afficher un fond rouge dans le rendu.
Voir code

13)Dessiner dans le rendu : donnez le code des fonctions permettant de dessiner dans le rendu les formes suivantes :
- Carré vide
- Carré plein
- Cercle vide
- Cercle plein.

14)Quelles sont les fonctions permettant de dessiner des points et des lignes ?
Pour cela, nous allons choisir notre couleur, puis utiliser la fonction SDL_RenderDrawPoint. Elle prend en paramètre le renderer sur lequel dessiner et les coordonnées du point à dessiner et retourne 0 en cas de succès et une valeur négative en cas d’erreur.
Et si nous avons besoin d’afficher plusieurs points d’un coup (donc de la même couleur), la SDL propose la fonction SDL_RenderDrawPoints. Elle prend en paramètre le renderer sur lequel dessiner, un tableau de SDL_Point et le nombre de points à dessiner (donc ce nombre doit être plus petit ou égal à la taille de ce tableau). Elle retourne comme d’habitude une valeur négative en cas d’erreur et 0 en cas de succès.
La SDL possède une fonction pour tracer un segment, la fonction SDL_RenderDrawLine. Elle prend en paramètre le renderer sur lequel dessiner le segment et les coordonnées des deux points à relier. Elle retourne comme d’habitude 0 en cas de succès et une valeur négative en cas d’erreur.
Et là encore, on peut dessiner plusieurs lignes à l’aide de la fonction SDL_RenderDrawLines. Elle prend en paramètre le renderer, un tableau de points et la taille de ce tableau. Elle retourne (encore une fois) 0 en cas de succès et une valeur négative en cas d’erreur.

15)A quoi servent les fonctions SDL_RenderClear et SDL_RenderPresent?
La fonction SDL_RenderClear permet d'effacer le renderer avec la couleur souhaité. Elle prend en paramètre le renderer qui doit être nettoyé et renvoie 0 en cas de succès et une valeur négative sinon.
La fonciton SDL_RenderPresent permet de mettre à jour l'écran. Elle prend en paramètre le renderer à mettre à jour et ne retourne rien.

16)Expliquez SDL_Delay:
La fonction permet de créer une temps de pause de x millie seconde.

17)Qu’est-ce qu’une surface en SDL 2?
Les surfaces sont l’équivalent des textures dans les anciennes versions de la SDL. On représente une surface avec le type SDL_Surface. La plus grande différence entre les surfaces et les textures est que les textures sont gérées par le GPU et les surfaces par le CPU. Elles peuvent être modifiées pixel par pixel plus facilement que les textures. Mais là où elles nous seront utiles, c’est pour gérer les images.

18)Donnez le code permettant de créer une surface:
La création de surface se fait avec la fonction SDL_CreateRGBSurface. SDL_CreateRGBSurface(uint32 flags, int width, int height, int depth, uint32 Rmask, uint32 Gmask, uint32 Bmask, uint32 Amask). Elle prend en paramètre :
-une liste de drapeaux (ce paramètre doit être à 0) ;
-la largeur de la surface ;
-la hauteur de la surface ;
-le nombre de bits par pixels (en général, on travaille avec 32 bits par pixels) ;
-les quatre derniers paramètres permettent à la SDL de savoir comment extraire la couleur de chaque pixel. Nous allons passer la valeur 0 -pour ces quatre paramètres.

Comme les autres ressources, il nous faut détruire chaque surface créée. La libération des données se fait avec la fonction SDL_FreeSurface. SDL_FreeSurface(SDL_Surface *surface).

19)Dessiner dans une surface : Donnez le code de la fonction SDL_FillRect:
La SDL nous offre des fonctions pour dessiner sur des surfaces, mais il y en a beaucoup moins que celles pour dessiner sur les textures. En fait, il n’y en a qu’une seule. Il s’agit de la fonction SDL_FillRect qui nous permet, comme son nom l’indique, de « remplir » un rectangle avec une couleur. int SDL_FillRect(SDL_Surface *dst, SDL_Rect *rect, Uint32 color). Elle prend en paramètre la surface qui doit être remplie, un pointeur sur SDL_Rect qui représente la partie de la surface à remplir (en passant NULL, on demande à remplir toute la surface) et la couleur voulue. Elle retourne 0 en cas de succès et une valeur négative en cas d’erreur.

20)SDL_BlitSurface(..) : donnez le code pour tester cette méthode.
Une autre opération possible sur les surfaces est le « blit ». Cette opération consiste à copier une surface (ou une partie d’une surface) sur une autre surface. On peut donc la voir comme l’équivalent de SDL_RenderCopy. Le blit s’effectue grâce à la fonction SDL_BlitSurface. int SDL_BlitSurface(SDL_Surface* src, const SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect).Ses différents paramètres sont :
-src, la surface source est la surface qui sera copiée ;
-srcrect est le rectangle source, c’est-à-dire la partie de la surface source qui sera copiée ;
-dst est la surface de destination, celle sur laquelle sera copiée la source ;
-dstrect est le rectangle de destination, celui où sera copiée la source.

21)Les textures : Qu’est-ce qu’une texture ? Donnez le code permettant de créer une texture.
Une texture est une structure SDL_Texture, c'est comme un paquet de pixels. SDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer,Uint32 format,int access,int w,int h). Elle prend en paramètre :
-renderer est le renderer auquel on veut que notre texture soit associée.
-format correspond au format de pixel (il en existe plusieurs donnés dans l’énumération SDL_PixelFormatEnum). Nous allons généralement choisir la valeur SDL_PIXELFORMAT_RGBA8888 qui correspond à la représentation que nous connaissons avec 4 chiffres entre 0 et 255.
-access correspond aux restrictions d’accès de notre structure. On peut lui donner trois valeurs (voir l’énumération SDL_TextureAccess).
-w et h correspondent à la largeur (width) et à la hauteur (height) de la texture (qui est, rappelons le, une sorte de rectangle de pixels).

Les trois valeurs possibles pour access sont celles-ci.
SDL_TEXTUREACCESS_STATIC: La texture est rarement modifiée
SDL_TEXTUREACCESS_STREAMING: La texture est souvent modifiée
SDL_TEXTUREACCESS_TARGET: La texture peut être utilisée comme cible de rendu (comme un renderer)

22)Dessinez dans une texture : SDL_RenderTarget, donnez le code pour tester cette méthode.
Nous avons précédemment dit que si l’on utilisait la valeur SDL_TEXTUREACCESS_TARGET, c’était pour pouvoir utiliser notre texture comme un renderer. Pour être plus précis, c’est pour pouvoir utiliser notre texture comme cible (« target ») de rendu. En fait, nous allons utiliser les fonctions de dessin vu au chapitre précédent, mais la cible du rendu ne sera plus le renderer mais la texture. Pour changer la cible de rendu, nous allons utiliser la fonction SDL_SetRenderTarget. Elle prend en paramètre un renderer et une texture. Elle retourne 0 en cas de succès et une valeur négative en cas d’erreur. Ensuite, après lui avoir fait nos dessins avec le texture, on remet le renderer en tant que cible de rendu. Avec ça rien ne s'affiche mais le dessin est fait sur le renderer.

23)SDL_RenderCopy : A quoi sert cette méthode, donnez le code pour tester cette méthode.
Afficher une texture consiste à copier la texture sur le renderer puis à mettre à jour le renderer. Ainsi, on verra bien la texture à l’écran. La copie de la texture se fait avec la fonction SDL_RenderCopy. Elle prend en paramètre :
-le renderer sur lequel doit être fait la copie ;
-la texture à copier ;
-un pointeur sur un rectangle qui correspond à la partie de la texture à copier (en passant NULL, on copie toute la texture) ;
-un pointeur sur un rectangle qui correspond à l’endroit du renderer où doit être copié la texture (en passant NULL, la texture remplira tout le renderer).
La vraie texture n’est pas redimensionnée. Il s’agit d’un redimensionnement à la volée, au moment de la copie. Notre variable texture n’est pas modifiée.

24)SDL_QueryTexture : A quoi sert cette méthode, donnez le code pour tester cette méthode.
Pour afficher une texture dans ses vraies dimensions, il faut connaître ses dimensions. Si nous ne les avons pas, il est possible de les récupérer avec la fonction SDL_QueryTexture. Son prototype: int SDL_QueryTexture(SDL_Texture* texture,Uint32* format,int*access,int* µw,int* h).

25)Les Images : La SDL2 ne prend en charge nativement que les formats bmp, si vous souhaitez utiliser d’autres formats vous devrez associer la lib SDL2_image à votre projet. SDL_LoadBMP, est la méthode permettant d’utiliser des bmp, donnez le code permettant de tester cette fonction.
Pour charger une image, nous allons utiliser la fonction SDL_LoadBMP. Elle prend en paramètre le chemin (relatif ou absolu) de l’image à charger et retourne une surface contenant cet objet ou NULL en cas d’erreur. On peut donc obtenir une surface contenant l’image grâce à SDL_LoadBMP. Il nous suffit de créer une texture à partir de cette image, et on peut ensuite l’afficher. Sans oublier de libérer la surface.

26)Donnez le code permettant de créer une texture à partir d’une image (bmp).
Il nous faut passer par les textures. Il nous faut donc transformer notre surface en texture, puis afficher la texture obtenue. Le passage de la surface à la texture se fait avec la fonction SDL_CreateTextureFromSurface. Elle prend en paramètre la surface qui nous permettra de créer la texture et le renderer auquel la texture créée doit être associée et retourne cette texture ou NULL en cas d’erreur. 

27)Prenez une image de votre choix au format bmp et testez les fonctions précédentes en ajoutant le code permettant d’afficher l’image dans le rendu.
Voir code

28)Depuis le début nous créons des instances permettant de manipuler la sdl2, cependant nous oublions une étape essentielle dans son utilisation, la destruction des instances, faites un relevé des instances crées et identifier les méthodes que vous devez utiliser pour libérer celles-ci.
window:		SDL_DestroyWindow(pWindow);
renderer:	SDL_DestroyRenderer(pRenderer);
surface:	SDL_FreeSurface(pSurface);
texture:	SDL_DestroyTexture(pTexture);

